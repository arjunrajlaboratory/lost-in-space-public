View(gene_boths)
gene_names = gene_boths %>% dplyr::pull(gene_name)
write.table(gene_names, file='particode/Data/RHB_Yogo_RC/gene_names.txt', sep="\t", col.names = F, row.names = F)
BiocManager::install("vitkl/ParetoTI", dependencies = c("Depends", "Imports", "LinkingTo"))
install("remotes")
install.packages('devtools')
BiocManager::install("vitkl/ParetoTI", dependencies = c("Depends", "Imports", "LinkingTo"))
library(ParetoTI)
ParetoTI::install_py_pcha(method = "conda",
extra_packages = c("tensorflow", "tensorflow-probability",
"pandas", "keras", "h5py",
"geosketch", "pydot", "scikit-learn==0.20",
"umap-learn"))
ParetoTI::install_py_pcha(method = "virtualenv")
Y
ParetoTI::install_py_pcha(method = "conda",
extra_packages = c("tensorflow", "tensorflow-probability",
"pandas", "keras", "h5py",
"geosketch", "pydot", "scikit-learn==0.20",
"umap-learn"))
library(tidyverse)
library(datapasta)
library(cowplot)
data = read_csv('tt.csv', col_names = F)
View(data)
data = t(data)
View(data)
data = data %>% mutate(time = 1:nrows(data))
data = data %>% as_tibble(.) %>% mutate(time = 1:nrows(data))
data = as_tibble(data)
data = data %>% mutate(time = 1:nrows(data))
data = data %>% mutate(time = 1:n_rows(data))
data = data %>% mutate(time = 1:n_row(data))
View(data)
data = data %>% mutate(time = 1:22)
View(data)
data = data %>% pivot_longer(V1:V5)
View(data)
ggplot(data) +
aes(x = factor(name), y = time, color = factor(name), size = value) +
geom_point()
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), size = value) +
geom_point()
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), size = value) +
geom_line()
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), size = as.integer(value)) +
geom_line()
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = as.integer(value)) +
geom_line()
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = as.integer(value)) +
geom_line(size = 1)
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = as.integer(value)) +
geom_line(size = 5)
?scale_alpha_discrete
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = as.integer(value)) +
geom_line(size = 5) +
scale_alpha_discrete(c(0,1))
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = factor(value)) +
geom_line(size = 5) +
scale_alpha_discrete(c(0,1))
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = factor(value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1))
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1))
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1)) +
theme(legend.position = 'none')
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none')
colnames(data) = c(1:5, 'time')
ggplot(data) +
aes(y = factor(name), x = time, color = factor(name), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none')
data = read_csv('tt.csv', col_names = F)
data = t(data)
data = as_tibble(data)
data = data %>% mutate(time = 1:22)
colnames(data) = c(1:5, 'time')
data = data %>% pivot_longer(1:5)
View(data)
data = read_csv('tt.csv', col_names = F)
data = t(data)
data = as_tibble(data)
data = data %>% mutate(time = 1:22)
colnames(data) = c(1:5, 'time')
data = data %>% pivot_longer(1:5. names_to= 'gene')
data = data %>% pivot_longer(1:5, names_to= 'gene')
ggplot(data) +
aes(y = factor(gene), x = time, color = factor(name), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none')
ggplot(data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none')
ggplot(data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
rbg(0,0,1)
rgb(0,0,1)
data2 = read_csv('tt2.csv', col_names = F)
View(data2)
data2 = t(data2)
data2 = as_tibble(data2)
data2 = data2 %>% mutate(time = 1:22)
View(data2)
colnames(data2) = c(1:5, 'time')
View(data2)
data2 = data2 %>% pivot_longer(1:5, names_to= 'gene')
ggplot(data2) +
aes(y = value, x = time, color = factor(gene),) +
geom_line(size = 1) +
ggtitle('Player piano test')
ggplot(data2) +
aes(y = value, x = time, color = factor(gene),) +
geom_line(size = 1) +
ggtitle('time trace piano test')
p2=ggplot(data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p1=ggplot(data2) +
aes(y = value, x = time, color = factor(gene),) +
geom_line(size = 1) +
ggtitle('time trace piano test')
plot_grid(p1,p2,nrow=2, align='hv')
gene_data = read_csv('tt.csv', col_names = F)
gene_data = t(gene_data)
gene_data = as_tibble(gene_data)
gene_data = gene_data %>% mutate(time = 1:22)
colnames(gene_data) = c(1:5, 'time')
View(gene_data)
gene_data = read_csv('tt3.csv', col_names = F)
gene_data = t(gene_data)
View(gene_data)
gene_data = read_csv('tt3.csv', col_names = F)
View(gene_data)
gene_data = read_csv('tt3.csv', col_names = F)
gene_data = read_csv('tt3.csv', col_names = F)
gene_data = t(gene_data)
gene_data = as_tibble(gene_data)
gene_data = gene_data %>% mutate(time = 1:50)
colnames(gene_data) = c(1:5, 'time')
View(gene_data)
View(gene_data)
gene_data = gene_data %>% pivot_longer(1:5, names_to= 'gene')
View(gene_data)
p1=ggplot(gene_data) +
aes(y = value, x = time, color = factor(gene)) +
geom_line(size = 1) +
ggtitle('time trace piano test')
p1
gene_data > 3
binarized_data = gene_data %>% mutate(value= value>3)
View(binarized_data)
p2=ggplot(data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
#scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
binarized_data = gene_data %>% mutate(value= value>5)
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 5) +
#scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
View(binarized_data)
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = (value)) +
geom_line(size = 1) +
#scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
View(binarized_data)
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = as.integer(value)) +
geom_line(size = 5) +
#scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = as.integer(value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
binarized_data = gene_data %>% mutate(value= value>3)
p1=ggplot(gene_data) +
aes(y = value, x = time, color = factor(gene)) +
geom_line(size = 1) +
ggtitle('time trace piano test')
p2=ggplot(binarized_data) +
aes(y = factor(gene), x = time, color = factor(gene), alpha = as.integer(value)) +
geom_line(size = 5) +
scale_alpha(range=c(0,1), guide = 'none') +
ggtitle('Player piano test')
p2
install.packages('here')
library(here)
here()
library(here)
setwd("D:/Dropbox (RajLab)/Shared_RyanBoe/LostInSpace/Paper/plotScripts/final_scripts/larsson_analysis/PanelA_Odds_Ratio_Tiled_Plots")
library(tidyverse)
library(RColorBrewer)
library(readr)
save_directory = "./../../../../plots/plots_for_figures/supplemental_figures/"
tiled_plots_esc <- read_delim("tiled plots_esc.txt",
delim = "\t", escape_double = FALSE,
col_types = cols(FullCorr = col_double(),
OR = col_double(), Ubiq = col_double()),
trim_ws = TRUE)
cast_k = read_csv('./../../../../extractedData/20210528_for_paper/analysis_of_larsson_2019/41586_2018_836_MOESM5_ESM_CAST.csv',
)
cast_k = cast_k %>% select(c(1,2))
cast_k= cast_k %>% separate(2, into =c('kon_cast', 'koff_cast'), sep = "(?<=\\d) +") %>% separate('kon_cast', into = c(NA, 'kon_cast'), sep = '[[]')
cast_k$kon_cast = as.numeric(cast_k$kon_cast)
cast_k$koff_cast = as.numeric(cast_k$koff_cast)
tiled_plots_esc = tiled_plots_esc %>% left_join(cast_k)
# pdf(file = "~/ESC_point.pdf",   # The directory you want to save the file in
#     width = 20, # The width of the plot in inches
#     height = 20) # The height of the plot in inches
#
# esc_point <- ggplot(tiled_plots_esc, aes(x = log10(kon), y = log10(koff))) +
#   geom_point(data = subset(subset(tiled_plots_esc, OR > 0), !is.na(OR)),
#             aes(fill = log(OR)),
#             alpha = 0.8,
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(subset(tiled_plots_esc, OR > 0), !is.na(OR)),
#             aes(fill = log(OR)),
#             alpha = 0.8,
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_esc, OR == 0),
#             linetype = 0,
#             fill = "pink",
#             alpha = 0.5,
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_esc, Ubiq==1),
#             linetype = 0,
#             fill = "purple", # subset of 0
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_esc, is.na(OR)),
#             linetype = 0,
#             fill = "grey",
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_esc, Zero_Zero==1),
#             linetype = 0,
#             fill = "gold",
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_esc, FullCorr==1),
#             linetype = 0,
#             fill = "green", # subset of NaN
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_esc, FullCorr_Ubiq==1),
#             linetype = 0,
#             fill = "red", # subset of 0/0
#             width=0.05,
#             height=0.07) +
#   theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
#
# dev.off()
#
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
fill = "pink",
alpha = 1,
aes(z=0)) + # low correlation
# stat_summary_2d(data = subset(tiled_plots_esc, Ubiq==1),
#                 fill = "purple",
#                 aes(z=0)) + # subset of 0
stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
alpha = 1,
fill = "grey",
aes(z=0)) + #NaN
# stat_summary_2d(data = subset(tiled_plots_esc, Zero_Zero==1),
#                 fill = "gold",
#                 aes(z=0)) + # 0/0
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr==1),
#                 fill = "green",
#                 aes(z=0)) + # subset of NaN
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr_Ubiq==1),
#                 fill = "red",
#                 aes(z=0)) + # subset of 0/0
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
escHM
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
#stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
fill = "pink",
alpha = 1,
aes(z=0)) + # low correlation
# stat_summary_2d(data = subset(tiled_plots_esc, Ubiq==1),
#                 fill = "purple",
#                 aes(z=0)) + # subset of 0
#stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
alpha = 1,
fill = "grey",
aes(z=0)) + #NaN
# stat_summary_2d(data = subset(tiled_plots_esc, Zero_Zero==1),
#                 fill = "gold",
#                 aes(z=0)) + # 0/0
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr==1),
#                 fill = "green",
#                 aes(z=0)) + # subset of NaN
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr_Ubiq==1),
#                 fill = "red",
#                 aes(z=0)) + # subset of 0/0
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
# stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
#                 fill = "pink",
#                 alpha = 1,
#                 aes(z=0)) + # low correlation
# stat_summary_2d(data = subset(tiled_plots_esc, Ubiq==1),
#                 fill = "purple",
#                 aes(z=0)) + # subset of 0
# stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
#                 alpha = 1,
#                 fill = "grey",
#                 aes(z=0)) + #NaN
# stat_summary_2d(data = subset(tiled_plots_esc, Zero_Zero==1),
#                 fill = "gold",
#                 aes(z=0)) + # 0/0
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr==1),
#                 fill = "green",
#                 aes(z=0)) + # subset of NaN
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr_Ubiq==1),
#                 fill = "red",
#                 aes(z=0)) + # subset of 0/0
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
escHM
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
fill = "pink",
alpha = 1,
aes(z=0)) + # low correlation
stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
alpha = 1,
fill = "grey",
aes(z=0)) + #NaN
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
escHM
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
# stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
#                 fill = "pink",
#                 alpha = 1,
#                 aes(z=0)) + # low correlation
# stat_summary_2d(data = subset(tiled_plots_esc, Ubiq==1),
#                 fill = "purple",
#                 aes(z=0)) + # subset of 0
# stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
#                 alpha = 1,
#                 fill = "grey",
#                 aes(z=0)) + #NaN
# stat_summary_2d(data = subset(tiled_plots_esc, Zero_Zero==1),
#                 fill = "gold",
#                 aes(z=0)) + # 0/0
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr==1),
#                 fill = "green",
#                 aes(z=0)) + # subset of NaN
# stat_summary_2d(data = subset(tiled_plots_esc, FullCorr_Ubiq==1),
#                 fill = "red",
#                 aes(z=0)) + # subset of 0/0
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
ggsave(file.path(save_directory, 'escHM_c57_no_NaN.eps'), escHM, width = 10, height = 6)
escHM <- ggplot(tiled_plots_esc,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_esc,
fun = function(x) mean(x)) +
stat_summary_2d(data = subset(tiled_plots_esc, OR <= 0),
fill = "pink",
alpha = 1,
aes(z=0)) + # low correlation
stat_summary_2d(data = subset(tiled_plots_esc, is.na(OR)),
alpha = 1,
fill = "grey",
aes(z=0)) + #NaN
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
ggsave(file.path(save_directory, 'escHM_c57.eps'), escHM, width = 10, height = 6)
fibHM <- ggplot(tiled_plots_fib,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_fib,
fun = function(x) mean(x)) +
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
library(RColorBrewer)
library(tidyverse)
library(readr)
save_directory = "./../../../../plots/plots_for_figures/supplemental_figures/"
tiled_plots_fib <- read_delim("tiled plots_fib.txt",
delim = "\t", escape_double = FALSE, trim_ws = TRUE)
cast_k = read_csv('./../../../../extractedData/20210528_for_paper/analysis_of_larsson_2019/41586_2018_836_MOESM3_ESM_CAST.csv',
)
cast_k = cast_k %>% select(c(1,2))
cast_k= cast_k %>% separate(2, into =c('kon_cast', 'koff_cast'), sep = "(?<=\\d) +") %>% separate('kon_cast', into = c(NA, 'kon_cast'), sep = '[[]')
cast_k$kon_cast = as.numeric(cast_k$kon_cast)
cast_k$koff_cast = as.numeric(cast_k$koff_cast)
tiled_plots_fib = tiled_plots_fib %>% left_join(cast_k)
# pdf(file = "~/fib_point.pdf",   # The directory you want to save the file in
#     width = 20, # The width of the plot in inches
#     height = 20) # The height of the plot in inches
#
# fib_point <- ggplot(tiled_plots_fib, aes(x = log10(kon), y = log10(koff))) +
#   geom_point(data = subset(subset(tiled_plots_fib, OR > 0), !is.na(OR)),
#              aes(fill = log(OR)),
#              alpha = 0.8,
#              width=0.03,
#              height=0.04) +
#   geom_tile(data = subset(subset(tiled_plots_fib, OR > 0), !is.na(OR)),
#             aes(fill = log(OR)),
#             alpha = 0.8,
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_fib, OR == 0),
#             linetype = 0,
#             fill = "pink",
#             alpha = 0.5,
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_fib, Ubiq==1),
#             linetype = 0,
#             fill = "purple", # subset of 0
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_fib, is.na(OR)),
#             linetype = 0,
#             fill = "grey",
#             width=0.03,
#             height=0.04) +
#   geom_tile(data = subset(tiled_plots_fib, Zero_Zero==1),
#             linetype = 0,
#             fill = "gold",
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_fib, FullCorr==1),
#             linetype = 0,
#             fill = "green", # subset of NaN
#             width=0.05,
#             height=0.07) +
#   geom_tile(data = subset(tiled_plots_fib, FullCorr_Ubiq==1),
#             linetype = 0,
#             fill = "red", # subset of 0/0
#             width=0.05,
#             height=0.07) +
#   theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
#
# dev.off()
#
fibHM <- ggplot(tiled_plots_fib,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_fib,
fun = function(x) mean(x)) +
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
fibHM
ggsave(file.path(save_directory, 'fibHM_c57_no_nan.eps'), fibHM, width = 10, height = 6)
fibHM <- ggplot(tiled_plots_fib,
aes(x = log10(kon), y = log10(koff), z = log10(OR))) +
stat_summary_2d(data = tiled_plots_fib,
fun = function(x) mean(x)) +
theme_classic() + scale_fill_gradientn(colours = c("#081d58", "#7fcdbb", "#ffffd9"))
ggsave(file.path(save_directory, 'fibHM_c57_no_nan.svg'), fibHM, width = 10, height = 6)
