outputFile <- here('extractedData', 'atacFragmentCountsAllCondsDifferentialPeaks.rds')
} else if (peak.set.to.use == "differential_merged") {
mergedPeaksFile <- here('extractedData', 'differentialAtacPeaks_merged_forIGV.bed')
outputFile <- here('extractedData', 'atacFragmentCountsAllCondsMergedDifferentialPeaks.rds')
center.peaks <- F
} else {
mergedPeaksFile <- peak.set.to.use
}
peakSetGRanges <- getPeaks(mergedPeaksFile)
if (center.peaks) {
peakSetGRanges <- resize(peakSetGRanges, width = peakWidth, fix = "center")
}
conditionsToCount <- unique(relevantMetadata$condition)
tn5bedFileList <- filter(relevantMetadata, condition %in% conditionsToCount)$tn5insertionPointsBed
sampleIDs <- filter(relevantMetadata, condition %in% conditionsToCount)$`SampleID-replicate`
# Caution: do not use bams as input! for bams, chromVar assigns the entire range covered by a read pair to the peaks it overlaps
fragmentCounts <- getCounts(tn5bedFileList,
peakSetGRanges,
paired =  FALSE,
by_rg = FALSE,
format = "bed",
colData = DataFrame(celltype = sampleIDs))
getwd()
saveRDS(fragmentCounts, "/Volumes/TISIPHONE/")
saveRDS(fragmentCounts, "/Volumes/TISIPHONE/fragmentCountsAll.rds")
head(peakSetGRanges)
saveRDS(peakSetGRanges, "/Volumes/ARIADNE/peakSetGRangesAtac.rds")
library(tidyverse)
library(Seurat)
library(ParetoTI)
library(msigdbr)
library(clusterProfiler)
library(cowplot)
save_directory = './../../../extractedData/yogesh_full_10x_data/FM01_parTI/'
plot_output_directory = './../../../plots/yogesh_10x_RC_data/pareto_projection/'
barcode_file = './../../../extractedData/yogesh_full_10x_data/barcode/set1_FM01/barcodeCellID.tsv'
barcode_raw = read_tsv(barcode_file, skip = 1, col_names = F) %>% select(-1)
colnames(barcode_raw) = c('cellID', 'barcode', 'sample')
barcode_raw = barcode_raw %>% mutate(full_barcode = ifelse(sample == 'S3',
paste0('250nM_', cellID, '-1'),
paste0('1uM_', sample, '_', cellID, '-1')))
matlab_pcs = read.csv(file = paste0(save_directory,
'pc_YogoscRNAseq_enrichment_4arch_newMsigDB.csv'), skip = 0, colClasses = 'numeric', header = F)
matlab_pcs = as.matrix(matlab_pcs)
merged_FM01 = readRDS(file = paste0(save_directory,
'merged_FM01_noPCA.rds'))
#Testing whether the projections are equivalent-- debugging step-----
arc = read_csv(file = paste0(save_directory,
'arc_YogoscRNAseq_enrichment_4arch_newMsigDB.csv'),
col_names = F)
arc_pc_hat = arc / apply(arc, 1, function(x) sqrt(sum(x^2)))
arc1_pc_hat = as.matrix(arc_pc_hat[1,])
arc2_pc_hat = as.matrix(arc_pc_hat[2,])
arc1_projection_from_pc = vector(mode = 'numeric', length = 26015)
arc2_projection_from_pc = vector(mode = 'numeric', length = 26015)
for (i in c(1:26015)){
arc1_projection_from_pc[i]=arc1_pc_hat %*% matlab_pcs[i,c(1:3)]
arc2_projection_from_pc[i]=arc2_pc_hat %*% matlab_pcs[i,c(1:3)]
}
arcOrig = read_csv(file = paste0(save_directory,
'arcOrig_YogoscRNAseq_enrichment_4arch_newMsigDB.csv'),
col_names = F)
arcOrig_hat = arcOrig / apply(arcOrig, 1, function(x) sqrt(sum(x^2)))
arcOrig1_hat = as.matrix(arcOrig_hat[1,])
arcOrig2_hat = as.matrix(arcOrig_hat[2,])
arc1_projection_from_orig = vector(mode = 'numeric', length = 26015)
arc2_projection_from_orig = vector(mode = 'numeric', length = 26015)
SCT_data = as.matrix(GetAssayData(object = merged_FM01, slot = "scale.data"))
for (i in c(1:26015)){
arc1_projection_from_orig[i]=arcOrig1_hat %*% SCT_data[,i]
arc2_projection_from_orig[i]=arcOrig2_hat %*% SCT_data[,i]
}
orig_projection = tibble(proliferation = arc1_projection_from_orig,
EMT = arc2_projection_from_orig)
pc_projection = tibble(proliferation = arc1_projection_from_pc,
EMT = arc2_projection_from_pc)
t1=ggplot(orig_projection) +
aes(x=proliferation,
y=EMT) +
geom_point() +
labs(title = 'Projection from high dimensional space')
t2=ggplot(pc_projection) +
aes(x=proliferation,
y=EMT) +
geom_point() +
labs(title = 'Projection from PC space')
plot_grid(t1,t2)
#Add annotations from barcodes and projections to seurat object----
full_cell_id = colnames(SCT_data)
pareto_reduction = as.matrix(orig_projection %>% select(proliferation, EMT))
rownames(pareto_reduction) = full_cell_id
colnames(pareto_reduction) = c('pareto_1', 'pareto_2')
merged_FM01[["pareto"]] <- CreateDimReducObject(embeddings = pareto_reduction,
key = "pareto_",
assay = DefaultAssay(merged_FM01))
colnames(matlab_pcs) = paste0('PC_', 1:(dim(matlab_pcs)[2]))
rownames(matlab_pcs) = full_cell_id
merged_FM01[["pca"]] <- CreateDimReducObject(embeddings = matlab_pcs[,1:50],
key = "PC_",
assay = DefaultAssay(merged_FM01))
barcode_counts = barcode_raw %>% count(barcode, sort = T)
barcode_ranks = barcode_counts %>% rownames_to_column('rank')
temp = barcode_raw %>% left_join(barcode_ranks)
barcode_metadata = tibble(full_barcode = full_cell_id)
barcode_metadata = barcode_metadata %>% left_join(temp)
dose_metadata = barcode_metadata %>% select(full_barcode)
dose_metadata = dose_metadata %>% separate(full_barcode, into = c('dose'), sep = '_', remove = F, extra = 'drop')
merged_FM01 = AddMetaData(object = merged_FM01,
barcode_metadata %>% pull(barcode, name=full_barcode),
'barcode_100bp')
merged_FM01 = AddMetaData(object = merged_FM01,
barcode_metadata %>% pull(n, name=full_barcode),
'barcode_counts')
merged_FM01 = AddMetaData(object = merged_FM01,
barcode_metadata %>% pull(rank, name=full_barcode),
'barcode_ranks')
merged_FM01 = AddMetaData(object = merged_FM01,
dose_metadata %>% pull(dose, name=full_barcode),
'dose')
merged_FM01 <- FindNeighbors(object=merged_FM01, dims=1:50, verbose = FALSE)
merged_FM01 <- FindClusters(object=merged_FM01, verbose = FALSE)
merged_FM01 <- RunUMAP(object = merged_FM01, dims = 1:50)
fig = DimPlot(merged_FM01, reduction = 'pareto') + NoLegend()
plot_data = FetchData(object = merged_FM01, vars = c("pareto_1", "pareto_2", "barcode_ranks", "barcode_counts", "dose", "orig.ident"))
plot_data=plot_data %>% separate(orig.ident, sep = "_", into = c(NA, "sample", NA)) %>% unite("dose_sample", c('dose', 'sample'))
plot_data$dose_sample =  factor(plot_data$dose_sample, levels = unique(plot_data$dose_sample))
g.cols <-
setNames( c('red', 'darkred', 'blue')
, levels(plot_data$dose_sample))
all_barcode_plots = lapply(c(1:500), function(x) ggplot(plot_data) +
aes(x=pareto_1,
y=pareto_2) +
geom_point(alpha = 0.1, size = 1, shape = 16) +
geom_point(data = plot_data %>% filter(barcode_ranks == x),
aes(color = dose_sample), size = 1.5, shape = 16)+
scale_color_manual(values = g.cols) +
theme_classic() +
labs(title = paste0('Colony barcode rank ', x)))
#Uncomment to save plots- slow
#lapply(c(1:500), function(x) ggsave(paste0(plot_output_directory, 'top_500_barcodes_on_projection_corrected/barcode_', x, '.png'), all_barcode_plots[[x]]))
singletons_pareto=ggplot(plot_data) +
aes(x=pareto_1,
y=pareto_2) +
geom_point(alpha = 0.1, size = 1, shape = 16) +
geom_point(data = plot_data %>% filter(barcode_counts == 1),
aes(color = dose), size = 1, shape = 16)+
scale_color_manual(values = c('darkred', 'red')) +
theme_classic() +
labs(title = 'Singletons')
plot_grid(plotlist = all_barcode_plots[c(1:5)], singletons_pareto)
FeaturePlot(merged_FM01, features = 'NKX2-2', reduction='pareto')+
geom_abline(slope = -1, intercept = 50, color = 'cyan')
plot_data = plot_data %>% mutate(pareto_front_proximity = ifelse(pareto_2 >= -pareto_1 + 55,
'near_edge',
ifelse(pareto_2 >= -pareto_1 + 10,
'intermediate',
ifelse(pareto_2 >= -pareto_1 - 5,
'far_from_edge', 'off_pareto_front'))))
plot_data$pareto_front_proximity = factor(plot_data$pareto_front_proximity,
levels = c('near_edge',
'intermediate',
'far_from_edge',
'off_pareto_front'))
ggplot(plot_data) +
aes(x=pareto_1,
y=pareto_2) +
geom_point(alpha = 0.1, size = 1, shape = 16, aes(color = pareto_front_proximity)) +
scale_color_manual(values = c('red', 'purple4', 'violet', 'black'))+
theme_classic() +
geom_abline(slope = -1, intercept = 55, color = 'red') +
geom_abline(slope = -1, intercept = -5, color = 'violet') +
geom_abline(slope = -1, intercept = 10, color = 'purple4')
merged_FM01 = AddMetaData(merged_FM01,
plot_data %>% rownames_to_column('temp') %>% pull(pareto_front_proximity, name=temp),
'pareto_front_proximity')
Idents(merged_FM01) = 'pareto_front_proximity'
foldChanges = FoldChange(object=merged_FM01, ident.1 = c('near_edge'), ident.2 = 'intermediate')
markers = FindMarkers(object=merged_FM01, ident.1 = 'near_edge', ident.2 = 'intermediate')
ggplot(plot_data) +
aes(x=pareto_1,
y=pareto_2) +
geom_point(alpha = 0.1, size = 1, shape = 16, aes(color = pareto_front_proximity)) +
scale_color_manual(values = c('red', 'purple4', 'violet', 'black'))+
theme_classic() +
geom_abline(slope = -1, intercept = -10, color = 'black') +
geom_abline(slope = 1, intercept = 35, color = 'red') +
geom_abline(slope = 1, intercept = 20, color = 'orange') +
geom_abline(slope = 1, intercept = 5, color = 'yellow') +
geom_abline(slope = 1, intercept = -10, color = 'green') +
geom_abline(slope = 1, intercept = -25, color = 'blue') +
geom_abline(slope = 1, intercept = -40, color = 'purple4')
#plot_data = plot_data %>% filter(pareto_2 <= -pareto_1 - 10) %>% mutate(distance_from_proliferation = 'off_pareto_front')
plot_data = plot_data %>%
mutate(distance_from_proliferation = ifelse(pareto_2 >= pareto_1 + 35,
'1',
ifelse(pareto_2 >= pareto_1 + 20,
'2',
ifelse(pareto_2 >= pareto_1 + 5,
'3',
ifelse(pareto_2 >= pareto_1 - 10,
'4',
ifelse(pareto_2 >= pareto_1 - 25,
'5',
ifelse(pareto_2 >= pareto_1 -40,
'6',
'7')))))))
plot_data = plot_data %>%
mutate(distance_from_proliferation = case_when(pareto_2 <= -pareto_1-5 ~ 'off_pareto_front',
TRUE ~ distance_from_proliferation))
plot_data$distance_from_proliferation = factor(plot_data$distance_from_proliferation,
levels = c('off_pareto_front',
'1',
'2',
'3',
'4',
'5',
'6',
'7'))
ggplot(plot_data) +
aes(x=pareto_1,
y=pareto_2) +
geom_point(alpha = 0.5, size = .51, shape = 16, aes(color = distance_from_proliferation)) +
scale_color_manual(values = c('black',
'red',
'orange',
'yellow',
'green',
'blue',
'purple4',
'violet'))+
theme_classic() +
geom_abline(slope = -1, intercept = -5, color = 'black') +
geom_abline(slope = 1, intercept = 35, color = 'red') +
geom_abline(slope = 1, intercept = 20, color = 'orange') +
geom_abline(slope = 1, intercept = 5, color = 'yellow') +
geom_abline(slope = 1, intercept = -10, color = 'green') +
geom_abline(slope = 1, intercept = -25, color = 'blue') +
geom_abline(slope = 1, intercept = -40, color = 'purple4')
merged_FM01 = AddMetaData(object = merged_FM01,
plot_data %>% rownames_to_column('temp') %>% pull(distance_from_proliferation, name=temp),
'pareto_segment')
Idents(merged_FM01) = 'pareto_segment'
non_singleton_segments = c('1', '2', '3', '4', '5', '6', '7')
segment_markers=list()
segment_markers = lapply(c(1:7), function(x) FindMarkers(merged_FM01, ident.1 = as.character(x), ident.2 = non_singleton_segments[-x], min.pct = .25, logfc.threshold = .25))
segment_marker_plots = lapply(c(1:7),
function(x) FeaturePlot(merged_FM01,
features = segment_markers[[x]] %>%
slice_max(n=6, order_by = avg_log2FC) %>%
rownames_to_column('temp') %>%
pull(temp),
reduction = 'pareto'))
lapply(c(1:7), function(x) ggsave(paste0(plot_output_directory,
'segment_marker_plots/',
'segment_', x, '_pareto_projection.png'),
segment_marker_plots[[x]],
height = 10,
width = 12))
segment_marker_plots_umap = lapply(c(1:7),
function(x) FeaturePlot(merged_FM01,
features = segment_markers[[x]] %>%
slice_max(n=6, order_by = avg_log2FC) %>%
rownames_to_column('temp') %>%
pull(temp),
reduction = 'umap'))
lapply(c(1:7), function(x) ggsave(paste0(plot_output_directory,
'segment_marker_plots/',
'segment_', x, '_umap_projection.png'),
segment_marker_plots_umap[[x]],
height = 10,
width = 12))
DimPlot(merged_FM01, cols = c('black',
'red',
'orange',
'yellow',
'green',
'blue',
'purple4',
'violet'))
DimPlot(merged_FM01, cols = c('black',
'red',
'orange',
'yellow',
'green',
'blue',
'purple4',
'violet'))
FeaturePlot(merged_FM01, features = c('NGFR', 'MITF', 'AXL', 'ITGA3'), reduction = 'pareto')
lapply(c(1:7), function(x) write.csv(segment_markers[[x]] %>% rownames_to_column('gene'), paste0(save_directory,
'segment_markers_segment', x, '.csv')))
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
pkgbuild::check_build_tools(debug = TRUE)
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
devtools::install_github('cole-trapnell-lab/leidenbase')
pkgbuild::check_build_tools(debug = TRUE)
devtools::install_github('cole-trapnell-lab/leidenbase')
library(Seurat)
temp = readRDS('~/Downloads/GSE161918_AllBatches_SeuratObj')
View(temp)
GetAssayData(temp, assay = 'SCT', slot = 'scale.data')
library(Seurat)
library(SeuratDisk)
install.packages('SeuratDisk')
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
remotes::install_github("mojaveazure/seurat-disk")
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
BiocManager::install("vitkl/ParetoTI", dependencies = c("Depends", "Imports", "LinkingTo"))
library(tidyverse)
library(plotly)
library(cowplot)
library(ggnewscale)
library(viridis)
gray_palette = c('#D8D5D5', '#898082', '#353131')
#####
#inputs
input_directory = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/pre_post_signal/'
input_directory2 = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/'
save_directory = './../../../plots/plots_for_figures/'
#####
#data import
sim_class = read_csv('./../../../extractedData/20210528_for_paper/vary_off_add_k_700params/long_simulation_class-rep1.csv', col_names = F)
setwd("~/Dropbox (RajLab)/Shared_RyanBoe/LostInSpace/Paper/plotScripts/final_scripts/simulation_analysis")
library(tidyverse)
library(plotly)
library(cowplot)
library(ggnewscale)
library(viridis)
gray_palette = c('#D8D5D5', '#898082', '#353131')
#####
#inputs
input_directory = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/pre_post_signal/'
input_directory2 = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/'
save_directory = './../../../plots/plots_for_figures/'
#####
#data import
sim_class = read_csv('./../../../extractedData/20210528_for_paper/vary_off_add_k_700params/long_simulation_class-rep1.csv', col_names = F)
colnames(sim_class) = c("n_species", 'subnet', 'param_id', "rep", "fraction_on", 'is_constant_high')
time_constant_df = read_csv(paste0(input_directory, 'export_time_constant.csv'), col_names = FALSE)
colnames(time_constant_df) = c("pre_rep", "param_id", "species", "time_constant")
time_constant_df$species = as.character(time_constant_df$species)
pre_means = read_csv(paste0(input_directory, 'pre_signal_means.csv'), col_names = FALSE)
colnames(pre_means) = c("pre_rep", "param_id", "mean_1", "mean_2", "mean_3", "mean_4", "mean_5")
post_means = read_csv(paste0(input_directory, 'post_signal_means.csv'), col_names = FALSE)
colnames(post_means) = c("pre_rep", "param_id", "mean_1", "mean_2", "mean_3", "mean_4", "mean_5")
metadata = read_csv(paste0('./../../../extractedData/20210528_for_paper/vary_off_add_k_700params/', 'metadata.csv'), col_names = FALSE)
colnames(metadata) = c("r_prod", "r_deg", "r_add", "r_off", "proddiff", "r_on", "k", "n", "p")
starting_values = read_csv(paste0(input_directory, 'starting_values.csv'), col_names = FALSE)
colnames(starting_values) = c("pre_rep", "param_id", "starting_1", "starting_2", "starting_3", "starting_4", "starting_5")
metadata = metadata %>% add_column(param_id = 1:nrow(metadata))
pre_means = pre_means %>% pivot_longer(mean_1:mean_5, names_to = "species", values_to = 'pre_mean') %>% separate(species, into = c(NA, 'species'), sep = '_')
post_means = post_means %>% pivot_longer(mean_1:mean_5, names_to = "species", values_to = 'post_mean') %>% separate(species, into = c(NA, 'species'), sep = '_')
starting_values = starting_values %>% pivot_longer(starting_1:starting_5, names_to = "species", values_to = 'starting_value') %>% separate(species, into = c(NA, 'species'), sep = '_')
all_signal_data = time_constant_df %>% left_join(pre_means) %>% left_join(post_means) %>% left_join(starting_values) %>% left_join(metadata)
all_signal_data = all_signal_data %>% mutate(dynamic_range = log2(post_mean/pre_mean))
all_signal_data = all_signal_data %>% mutate(time_constant_no_nan = time_constant)
all_signal_data$time_constant_no_nan[is.na(all_signal_data$time_constant_no_nan)] = 0
all_signal_data = all_signal_data %>% left_join(sim_class)
summary_signal_data = all_signal_data %>% group_by(param_id, species) %>% summarize(mean_time = mean(time_constant, na.rm=T),
mean_time_nan_zero = mean(time_constant_no_nan),
mean_pre_mean = mean(pre_mean),
mean_post_mean= mean(post_mean))
summary_signal_data = summary_signal_data %>% mutate(mean_dynamic_range = log2(mean_post_mean/mean_pre_mean))
summary_signal_data = summary_signal_data %>% left_join(metadata) %>% add_column(n_species = 5,
subnet = 1)
summary_signal_data = summary_signal_data %>% left_join(sim_class)
bursts = tibble()
files_to_read = paste0(input_directory2, 'long_bursts-rep', 1, '.csv')
bursts = bind_rows(bursts, files_to_read %>%
lapply(read_csv, col_names = FALSE))
OR = tibble()
files_to_read = paste0(input_directory2, 'long_OR-rep', 1, '.csv')
OR = bind_rows(OR, files_to_read %>%
lapply(read_csv, col_names = FALSE))
colnames(OR) = c("n_species", 'subnet', 'param_id', "rep", 'mean_OR')
OR$mean_OR = as.double(OR$mean_OR)
colnames(bursts) = c("n_species", 'subnet', 'param_id', "rep", "number_bursts", "mean_burst_length", "mean_total_nodes", 'mean_concurrent_nodes', "mean_fraction_on")
metadata = read_csv(paste0(input_directory2, 'metadata.csv'), col_names = FALSE)
colnames(metadata) = c("r_prod", "r_deg", "r_add", "r_off", "proddiff", "r_on", "k", "n", "p")
metadata = metadata %>% add_column(param_id = 1:nrow(metadata))
all_data = left_join(OR, metadata) %>% left_join(bursts) %>% mutate(log_mean_OR = log(mean_OR))
full_data = summary_signal_data %>% left_join(all_data)
time_constant=ggplot(summary_signal_data %>% filter(k == 110, species ==2)) +
aes(x = r_add, y= r_off, label = param_id) +
geom_tile(data = summary_signal_data %>% filter(k == 110, species ==2, is_constant_high == 0), aes(fill = mean_time)) +
scale_x_log10() +
scale_y_log10() +
labs(title = 'K = 110, nodes = 5, subnet = 1, species = 2') +
scale_fill_viridis(direction = 1, option = "mako", name ='time')+
new_scale_fill()+
geom_tile(aes(fill=as.factor(is_constant_high)))+
scale_fill_manual(values = c('transparent', gray_palette[3]))+
theme_bw()+
facet_grid(.~species)+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = 'bold'),
axis.title = element_text(face = 'bold'))
time_constant
mean_total_nodes_v_time_constant_filt_DNR= ggplot(plot_data) +
aes(x = mean_total_nodes, y = mean_time_nan_zero, color = factor(k),label = param_id) +
geom_point(shape=16) +
geom_line() +
theme_classic()+
scale_color_viridis_d(option='plasma', end = 0.95)+
labs(x = 'mean_total_nodes',
y = 'time constant',
title= 'All dynamic range at least 4 fold')
plot_data = full_data %>% filter(species ==2, mean_dynamic_range > 2, is_constant_high==0)
mean_total_nodes_v_time_constant_filt_DNR= ggplot(plot_data) +
aes(x = mean_total_nodes, y = mean_time_nan_zero, color = factor(k),label = param_id) +
geom_point(shape=16) +
geom_line() +
theme_classic()+
scale_color_viridis_d(option='plasma', end = 0.95)+
labs(x = 'mean_total_nodes',
y = 'time constant',
title= 'All dynamic range at least 4 fold')
mean_total_nodes_v_time_constant_filt_DNR
gray_palette = c('#D8D5D5', '#898082', '#353131')
#####
#inputs
input_directory = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/pre_post_signal/'
input_directory2 = './../../../extractedData/20210528_for_paper/vary_off_add_k_700params/'
save_directory = './../../../plots/plots_for_figures/'
#####
#data import
sim_class = read_csv('./../../../extractedData/20210528_for_paper/vary_off_add_k_700params/long_simulation_class-rep1.csv', col_names = F)
colnames(sim_class) = c("n_species", 'subnet', 'param_id', "rep", "fraction_on", 'is_constant_high')
time_constant_df = read_csv(paste0(input_directory, 'times_to_half_max2.csv'), col_names = FALSE)
colnames(time_constant_df) = c("pre_rep", "param_id", "species", "time_constant")
time_constant_df$species = as.character(time_constant_df$species)
pre_means = read_csv(paste0(input_directory, 'pre_signal_means2.csv'), col_names = FALSE)
colnames(pre_means) = c("pre_rep", "param_id", "mean_1", "mean_2", "mean_3", "mean_4", "mean_5")
post_means = read_csv(paste0(input_directory, 'post_signal_means2.csv'), col_names = FALSE)
colnames(post_means) = c("pre_rep", "param_id", "mean_1", "mean_2", "mean_3", "mean_4", "mean_5")
metadata = read_csv(paste0('./../../../extractedData/20210528_for_paper/vary_off_add_k_700params/', 'metadata.csv'), col_names = FALSE)
colnames(metadata) = c("r_prod", "r_deg", "r_add", "r_off", "proddiff", "r_on", "k", "n", "p")
starting_values = read_csv(paste0(input_directory, 'starting_values.csv'), col_names = FALSE)
colnames(starting_values) = c("pre_rep", "param_id", "starting_1", "starting_2", "starting_3", "starting_4", "starting_5")
metadata = metadata %>% add_column(param_id = 1:nrow(metadata))
pre_means = pre_means %>% pivot_longer(mean_1:mean_5, names_to = "species", values_to = 'pre_mean') %>% separate(species, into = c(NA, 'species'), sep = '_')
post_means = post_means %>% pivot_longer(mean_1:mean_5, names_to = "species", values_to = 'post_mean') %>% separate(species, into = c(NA, 'species'), sep = '_')
starting_values = starting_values %>% pivot_longer(starting_1:starting_5, names_to = "species", values_to = 'starting_value') %>% separate(species, into = c(NA, 'species'), sep = '_')
all_signal_data = time_constant_df %>% left_join(pre_means) %>% left_join(post_means) %>% left_join(starting_values) %>% left_join(metadata)
all_signal_data = all_signal_data %>% mutate(dynamic_range = log2(post_mean/pre_mean))
all_signal_data = all_signal_data %>% mutate(time_constant_no_nan = time_constant)
all_signal_data$time_constant_no_nan[is.na(all_signal_data$time_constant_no_nan)] = 0
all_signal_data = all_signal_data %>% left_join(sim_class)
summary_signal_data = all_signal_data %>% group_by(param_id, species) %>% summarize(mean_time = mean(time_constant, na.rm=T),
mean_time_nan_zero = mean(time_constant_no_nan),
mean_pre_mean = mean(pre_mean),
mean_post_mean= mean(post_mean))
summary_signal_data = summary_signal_data %>% mutate(mean_dynamic_range = log2(mean_post_mean/mean_pre_mean))
summary_signal_data = summary_signal_data %>% left_join(metadata) %>% add_column(n_species = 5,
subnet = 1)
summary_signal_data = summary_signal_data %>% left_join(sim_class)
bursts = tibble()
files_to_read = paste0(input_directory2, 'long_bursts-rep', 1, '.csv')
bursts = bind_rows(bursts, files_to_read %>%
lapply(read_csv, col_names = FALSE))
OR = tibble()
files_to_read = paste0(input_directory2, 'long_OR-rep', 1, '.csv')
OR = bind_rows(OR, files_to_read %>%
lapply(read_csv, col_names = FALSE))
colnames(OR) = c("n_species", 'subnet', 'param_id', "rep", 'mean_OR')
OR$mean_OR = as.double(OR$mean_OR)
colnames(bursts) = c("n_species", 'subnet', 'param_id', "rep", "number_bursts", "mean_burst_length", "mean_total_nodes", 'mean_concurrent_nodes', "mean_fraction_on")
metadata = read_csv(paste0(input_directory2, 'metadata.csv'), col_names = FALSE)
colnames(metadata) = c("r_prod", "r_deg", "r_add", "r_off", "proddiff", "r_on", "k", "n", "p")
metadata = metadata %>% add_column(param_id = 1:nrow(metadata))
all_data = left_join(OR, metadata) %>% left_join(bursts) %>% mutate(log_mean_OR = log(mean_OR))
full_data = summary_signal_data %>% left_join(all_data)
time_constant=ggplot(summary_signal_data %>% filter(k == 110, species ==2)) +
aes(x = r_add, y= r_off, label = param_id) +
geom_tile(data = summary_signal_data %>% filter(k == 110, species ==2, is_constant_high == 0), aes(fill = mean_time)) +
scale_x_log10() +
scale_y_log10() +
labs(title = 'K = 110, nodes = 5, subnet = 1, species = 2') +
scale_fill_viridis(direction = 1, option = "mako", name ='time')+
new_scale_fill()+
geom_tile(aes(fill=as.factor(is_constant_high)))+
scale_fill_manual(values = c('transparent', gray_palette[3]))+
theme_bw()+
facet_grid(.~species)+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_text(size = 12),
plot.title = element_text(size = 16, face = 'bold'),
axis.title = element_text(face = 'bold'))
plot_data = full_data %>% filter(species ==2, mean_dynamic_range > 2, is_constant_high==0)
mean_total_nodes_v_time_constant_filt_DNR= ggplot(plot_data) +
aes(x = mean_total_nodes, y = mean_time_nan_zero, color = factor(k),label = param_id) +
geom_point(shape=16) +
geom_line() +
theme_classic()+
scale_color_viridis_d(option='plasma', end = 0.95)+
labs(x = 'mean_total_nodes',
y = 'time constant',
title= 'All dynamic range at least 4 fold')
mean_total_nodes_v_time_constant_filt_DNR
time_constant
